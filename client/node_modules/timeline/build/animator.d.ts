import { Milliseconds } from "./constants";
import Band from "./models/band";
import Canvas from "./views/canvas";
import Debug from "./views/debug";
import { MinimapBandConfig, EventsBandConfig } from "./models/config";
import EventsBand from "./models/band/events";
import Popup from './views/popup';
export declare type Multiplier = .25 | .5 | 1 | 2 | 4 | 8 | 16;
export declare class Animator {
    private readonly elapsedTimeThreshold;
    private readonly goToDuration;
    private readonly zoomToDuration;
    private activeBand;
    readonly multipliers: Multiplier[];
    private centerMarker;
    private multiplier;
    private direction;
    private prevTimestamp;
    private elapsedTimeTotal;
    private models;
    private views;
    private zoomMarker;
    registerModel(model: Band<MinimapBandConfig | EventsBandConfig>): void;
    registerView(view: Canvas | Debug | Popup): void;
    private adjustMinimapBands;
    animate: (timestamp: number) => void;
    private resetElapsedTimeTotal;
    accelerate(): number;
    decelerate(): number;
    goTo(nextCenter: Milliseconds): void;
    zoomTo(band: EventsBand, nextZoomLevel: number): void;
    speed(multiplier: string): void;
    isPlaying(): boolean;
    isPlayingForward(): boolean;
    isPlayingBackward(): boolean;
    nextFrame(): void;
    playForward(): void;
    playBackward(): void;
    stop(): void;
    toggle(): void;
}
declare const _default: Animator;
export default _default;
